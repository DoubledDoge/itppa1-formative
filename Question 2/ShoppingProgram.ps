# Function that displays the item menu to the user with the items, and its corresponding prices:
function viewMenu(valCOFFEE_PRICE, valSANDWICH_PRICE, valSALAD_PRICE, valJUICE_PRICE, valMUFFIN_PRICE, valPIZZA_PRICE, valSOUP_PRICE, valBURGER_PRICE)

    display "======================= Cafeteria Item Menu ========================" 
    display "1. Coffee       - R ", valCOFFEE_PRICE 
    display "2. Sandwich     - R ", valSANDWICH_PRICE 
    display "3. Salad        - R ", valSALAD_PRICE
    display "4. Juice        - R ", valJUICE_PRICE
    display "5. Muffin       - R ", valMUFFIN_PRICE
    display "6. Pizza Slice  - R ", valPIZZA_PRICE
    display "7. Soup         - R ", valSOUP_PRICE
    display "8. Burger       - R ", valBURGER_PRICE
    display "===================================================================="
endfunction

# Function that adds your chosen order to an array, and calulates prices:
function placeOrder()

    # Variables:
    integer amountOrdered, i, itemNo
    double grossTotal = 0, itemPrice

    # Constant variables:
    Constant double COFFEE_PRICE = 15.00, SANDWICH_PRICE = 30.00, SALAD_PRICE = 25.00,
                    JUICE_PRICE = 10.00, MUFFIN_PRICE = 20.00, PIZZA_PRICE = 35.00,
                    SOUP_PRICE = 18.00, BURGER_PRICE = 40.00

    # Displaying the menu: 
    viewMenu(COFFEE_PRICE, SANDWICH_PRICE, SALAD_PRICE, JUICE_PRICE, MUFFIN_PRICE, PIZZA_PRICE, SOUP_PRICE, BURGER_PRICE)

    # Input validation for amount of items:
    do
        display "Choose the amount of items you want to purchase (25 items max): "
        input amountOrdered
    until amountOrdered > 0 and amountOrdered <= 25

    # Array to store the prices of the ordered items:
    double orderedItemPrices[amountOrdered]

    # Main loop of the function:
    for i = 1 to amountOrdered do
        display "Choose the item no. ", i, " that you want to purchase: "
        input itemNo
        
        # Switch case of the menu items:
        Select Case itemNo
            Case 1: itemPrice = COFFEE_PRICE 
            Case 2: itemPrice = SANDWICH_PRICE
            Case 3: itemPrice = SALAD_PRICE
            Case 4: itemPrice = JUICE_PRICE
            Case 5: itemPrice = MUFFIN_PRICE
            Case 6: itemPrice = PIZZA_PRICE
            Case 7: itemPrice = SOUP_PRICE
            Case 8: itemPrice = BURGER_PRICE
            Default:
                display "Invalid item number. Please try again."
                i = i - 1
        endselect

        # Calculations:
        grossTotal += itemPrice
        orderedItemPrices[i] = itemPrice
    endfor

    return grossTotal
endfunction

# Function that writes your order to a file and adds a discount (if applicable):
function checkoutOrder(valGrossTotal, valFirstName, valLastName)

# Variables:
Constant double DISCOUNT_THRESHOLD = 100.00, DISCOUNT_RATE = 0.10
double netTotal, discountAmount = 0

    # Check for discount and apply it:
    if valGrossTotal > DISCOUNT_THRESHOLD then
        display "Discount Applied"
        discountAmount = valGrossTotal * DISCOUNT_RATE
        netTotal = valGrossTotal - discountAmount
        display "Discount Amount: R", discountAmount
    else
        display "No discount applied"
        netTotal = valGrossTotal
    endif

    # Final Bill:
    display "Final Bill: R ", netTotal

    # Write to CafeteriaBill.txt
    if exists("CafeteriaBill.txt") then 
        open append("CafeteriaBill.txt")
        write(valFirstName, " ", valLastName, " R", netTotal) to CafeteriaBill.txt
        close("CafeteriaBill.txt")
    endif
endfunction

# Main program:
ShoppingProgram
Start

    # Normal Variables:
    string firstName, lastName
    
    # First and last name input:
    display "Please enter your first name: "
    input firstName

    display "Please enter your last name: "
    input lastName

    # Functions:
    grossTotal = placeOrder()
    checkoutOrder(grossTotal, firstName, lastName)
    display "Have a great day!"
End
